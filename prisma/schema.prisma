datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  
  // CV related relations
  cvs           CV[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// CV Models

model CV {
  id          String       @id @default(cuid())
  title       String
  summary     String?
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // CV Sections
  educations  Education[]
  experiences Experience[]
  skills      Skill[]
  projects    Project[]
  languages   Language[]
  contact     Contact?
  
  // Template and styling
  template    String       @default("standard") // standard, modern, creative, etc.
  primaryColor String      @default("#3B82F6") // Default blue color
  
  isPublic    Boolean      @default(false)
  slug        String?      @unique // For public sharing
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Education {
  id          String    @id @default(cuid())
  institution String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  description String?
  location    String?
  gpa         String?
  
  cvId        String
  cv          CV        @relation(fields: [cvId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Experience {
  id          String    @id @default(cuid())
  company     String
  position    String
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  description String?
  location    String?
  
  cvId        String
  cv          CV        @relation(fields: [cvId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Skill {
  id          String    @id @default(cuid())
  name        String
  level       Int?      @default(0) // 0-100 proficiency level
  category    String?   // e.g., "Technical", "Soft Skills", etc.
  
  cvId        String
  cv          CV        @relation(fields: [cvId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Project {
  id          String    @id @default(cuid())
  title       String
  description String?
  url         String?
  startDate   DateTime?
  endDate     DateTime?
  
  cvId        String
  cv          CV        @relation(fields: [cvId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Language {
  id          String    @id @default(cuid())
  name        String
  proficiency String    // e.g., "Native", "Fluent", "Intermediate", "Basic"
  
  cvId        String
  cv          CV        @relation(fields: [cvId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Contact {
  id          String    @id @default(cuid())
  phone       String?
  email       String?
  website     String?
  linkedin    String?
  github      String?
  twitter     String?
  address     String?
  
  cvId        String    @unique
  cv          CV        @relation(fields: [cvId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
